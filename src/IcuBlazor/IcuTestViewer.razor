@page "/IcuTestViewer"

@using System.Reflection
@using IcuBlazor.razor
@using IcuBlazor.razor.Views
@using static IcuBlazor.BaseUtils

@inject IServiceProvider sp
@inject NavigationManager nav

@* --------------------------------------------------
<IcuTestViewer> is here to: 
- Check configuration
  - Verify IcuConfig values and create IcuClient(ICU).
  - Ensure .css/.js files are included
  - Startup code (i.e. AddIcuBlazor(..)) has been setup correctly
- Start Test Execution
  - Load all <IcuTestSuite/> children
  - Pass values to IcuTestRunner
*@

@code {

    [Parameter] public int Width { get; set; } = 1000;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    IcuClient? ICU = null;
    List<IcuTestSuite> Suites = new List<IcuTestSuite>();
    Exception? ex;
    IcuTestRunner? runner;

    internal void AddSuite(IcuTestSuite suite) {
        DBG.Log($"Adding Suite: <{suite.GetType().FullName} />");
        Suites.Add(suite);
    }

    async Task LoadTestSuites() {
        // Ensure all ChildContent suites are added to TestRunner.Suites.
        StateHasChanged();
        await Task.Delay(100);
        if (Suites.Count == 0) {
            //NoSuitesFound();
            throw new IcuException("<IcuTestViewer> is empty.", "");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            try {
                ICU = IcuClient.Fetch(sp);
                ICU.ParseUri(nav.Uri);
                await ICU.InitAsync();
                await LoadTestSuites();
                if (runner == null)
                    throw (new Exception("Internal error: Can't find IcuTestRunner"));
                runner.Run(Suites);
            } catch (Exception e) {
                DBG.Err($"\n{e}");
                ex = e;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

<div class="icu viewer"> @* --- use ".icu" css namespace ------------ *@
    @if (ex != null) {
        <div style="width:50em">
        <ExceptionView Model="@ex"/>
        </div>
    } else if (ICU == null) {
        <p>...</p>
    } else {
        <CascadingValue Value="@this" Name="ICUViewer" IsFixed="true">
            <CascadingValue Value="@ICU" Name="ICU" IsFixed="true">
                <IcuVerify />
                @ChildContent
                <IcuTestRunner @ref="runner" Width="@Width" />
            </CascadingValue>
        </CascadingValue>
    }
</div>