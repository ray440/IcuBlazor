@page "/IcuDiffImage"

@inject UIHelper UI

@code {
    [CascadingParameter(Name = "ICU")] IcuClient ICU { get; set; } = null!; // non-null required
    [CascadingParameter(Name = "CPview")] IcuCheckpoint CPview { get; set; } = null!; // non-null required
    [Parameter] public Checkpoint Check { get; set; } = null!; // non-null required

    string currUrl = "", newUrl = "", diffUrl = "";
    string shownUrl = "";
    string pixelate = "";
    string browser_pix = "";
    string pzid = BaseUtils.PrefixedID("pzid-");
    DiffImageAssert diff = null!; // ok init

    DiffImageAssert getDiff()
    {
        var d = Check.model as DiffImageAssert;
        if (d == null) throw (new Exception("Invalid DiffImageAssert"));
        return d;
    }

    string status = "";
    async Task ShowStatus(string msg, int wait)
    {
        status = msg;
        CPview.Update(); //StateHasChanged();
        await Task.Delay(500);
    }

    void ShowImage(string url) {
        if (shownUrl != url)
            shownUrl = url;
    }
    void HoverNew()  => ShowImage(newUrl);
    void HoverCurr() => ShowImage(currUrl);
    void HoverDiff() => ShowImage(diffUrl);

    async Task VerifyTest(bool save) {
        try {
            if (save) {
                await ShowStatus("Saving...", 10);
                await IcuRpc.SaveImageTest(ICU.Session, diff);
                status = "Saved";
            }
            Check.SetSaveSkip(save);
            Check.Verify().Value = false; // continue processing other tests
        } catch (Exception e) {
            status = $"Error: Couldn't save test '{diff.Name}' \n   {e.Message}";
        }
        StateHasChanged();
        ICU.MsgBus.Notify(IcuEvent.NewRefreshView(""));
    }
    async Task Click(bool save)
    {
        if (ICU.Config.CanSaveTestData) {
            await VerifyTest(save);
        } else {
            await ShowStatus("Saving...", 500);
            await ShowStatus("Canceled: Saving test data has been disabled.", 10);
        }
    }
    void SkipTest()  => _ = Click(false);
    void SaveTest()  => _ = Click(true);

    void KeyWasPressed(KeyboardEventArgs args) {
        var k = args.Key.ToLower();
        switch (k) {
        case "1": HoverNew(); break;
        case "2": HoverCurr(); break;
        case "3": HoverDiff(); break;
        case "p":
            // should do this automatically if scale > 2
            pixelate = (pixelate.Length==0) ? browser_pix : "";
            break;
        default:
            break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await UI.JS.PanZoomInit("#"+pzid);
            var pix = (ENV.Browser.Equals("Chrome")) ? "pix" : "crisp";
            browser_pix = $"pixelate-{pix}";
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    string timestamp = "?"+(DateTime.Now.Ticks);
    string UnCached (string url) => (url + timestamp);

    RenderFragment toolbar()
    {
        var pass = (Check.Outcome == Outcome.Pass);
        var isNew = (Check.Outcome == Outcome.New);
        var dir = ICU.Config.TestDir;
        var tname = diff.Name;
        var ncols = 6;

        newUrl  = UnCached(IcuIO.NewImageFile(dir, tname));
        if (pass) {
            shownUrl = newUrl;
            ncols = 1;
        } else if (String.IsNullOrEmpty(shownUrl)) {
            currUrl = UnCached(IcuIO.CurrImageFile(dir, tname));
            diffUrl = UnCached(IcuIO.DiffImageFile(dir, tname));
            shownUrl = newUrl;
        }
        var cols = $"1fr repeat({ncols}, auto)";

        return (
@<GridLayout Cols="@cols" class="toolbar">
    <span> @status </span>
    @if (!pass) {
        <Btn class="hover-brighter hover-lined" @onmouseover=HoverNew>New</Btn>
        if (isNew) {
            <span />
            <span />
        } else {
            <Btn class="hover-brighter hover-lined" @onmouseover=HoverCurr>Old</Btn>
            <Btn class="hover-brighter hover-lined" @onmouseover=HoverDiff>Diff</Btn>
        }
        if (Check.Verify().Value) {
            <Btn class="box-skip hover-brighter" @onclick=SkipTest>Skip Image</Btn>
        } else {
            <span />
        }
        <Btn class="box-pass hover-brighter" @onclick=SaveTest>Save Image</Btn>
    }
    <DropDown OpenOnHover="false">
        <LabelContent>
            <div class="hover-brighter hover-lighter40">?</div>
        </LabelContent>
        <DropContent>
            <PopupHelp name="Image"/>
        </DropContent>
    </DropDown>
</GridLayout>
        );
    }
}
@{
    diff = getDiff();
    CPview.SetToolbar(toolbar());
}

<div @onkeydown="KeyWasPressed">

    @* --- test results --------------------------------------- *@
    <div class="image-holder" title=@diff.Desc>
        <img class="icu-image @pixelate" src="@shownUrl" id="@pzid" />
        <img class="icu-image img-sizer" src="@currUrl" />
        <img class="icu-image img-sizer" src="@newUrl" />
    </div>
</div>
