@page "/IcuToolbar"
@inject NavigationManager Nav

@code {

    [CascadingParameter(Name = "ICU")] IcuClient ICU { get; set; } = null!; // non-null required

    [Parameter] public EventCallback<bool> OnUpdate { get; set; }
    void UpdateParent() { // Parent is typically TestRunner
        base.InvokeAsync(()=>OnUpdate.InvokeAsync(true));
    }

    public Exception? error = null;
    public string status = "";
    public bool running = true;
    int numTests = 1, doneTests = 0;

    [Parameter]
    public string Filter {
        get { return ICU.Config.Filter; }
        set {
            var f = String.IsNullOrWhiteSpace(value) ? "" : value.ToLower();
            ICU.Config.Filter = f;
            _ = ICU.LocalSet("Filter", f);
            UpdateParent();
        }
    }

    void Abort(string msg) {
        error = new Exception(msg);
        ICU.Session.AbortRun(msg);
        running = false;
        UpdateParent();
    }

    void ToggleExecution() {
        if (running) {
            Abort("Execution canceled.");
        } else {
            Nav.NavigateTo(Nav.Uri, true); // reload page
        }
    }

    IcuSettings? setDlg;

    void OnSettingsShown(bool open) {
        if (!open) {
            UpdateParent();
        }
    }

    //TestMethod lastm = null;
    //void handle_accordion_view(TestMethod sm)
    //{
    //    // Accordion display: only show one selection at a time.
    //    // - but UX is jumpy...
    //    if (lastm != null && lastm != sm) {
    //        lastm.Open = false;
    //        lastm.OnChange.Notify(lastm);
    //    }
    //    lastm = sm;
    //}

    void HandleEvent(IcuEvent e) {
        switch (e) {
        case IcuEvent.AddTest et:
            status = et.Item.Path;
            numTests++;
            //DBG.Log($"IcuEvent AddTest '{numTests}   {et.Item.Path}'");
            break;
        case IcuEvent.Check ecp: // collect all checkpoints
            var cp = ecp.Item;
            //DBG.Log($"IcuEvent Check '{cp.header}'");
            ICU.CheckGroup.Add(cp);
            break;
        case IcuEvent.MethodStart em:
            //DBG.Log($"IcuEvent MethodStart '{em.Item.Name}'");
            status = em.Item.Path;
            break;
        case IcuEvent.MethodEnd em:
            var m = em.Item;
            doneTests++;
            //base.InvokeAsync(StateHasChanged);
            //DBG.Log($"IcuEvent MethodEnd '{doneTests}    {m.Name}' => '{m.Outcome}'");
            break;
        //case IcuEvent.Selected em:
        //    handle_accordion_view(em.Item);
        //    break;
        case IcuEvent.SuiteStart pg:
            //DBG.Log($"IcuEvent SuiteStart '{pg.Item.GetType().Name}'");
            break;
        case IcuEvent.SuiteEnd pg:
            //DBG.Log($"IcuEvent SuiteEnd '{pg.Item.GetType().Name}'");
            break;
        case IcuEvent.RunStart pg:
            doneTests = 0;
            //DBG.Log($"IcuEvent RunStart '{pg.Item.GetType().Name}'");
            running = true;
            break;
        case IcuEvent.RunEnd pg:
            //DBG.Log($"IcuEvent RunEnd '{pg.Item.GetType().Name}'");
            if (doneTests==0) {
                var err = "No tests run.";
                var f = ICU.Config.Filter;
                if (f.Length > 0)
                    err = $"{err}  Perhaps they were filtered out by '{f}'.";
                Abort(err);
            }
            status = "";
            running = false;
            base.InvokeAsync(StateHasChanged);
            break;
        case IcuEvent.Error ex:
            //DBG.Log($"IcuEvent Error '{ex.Item}'");
            Abort(ex.Item.ToString());
            break;
        case IcuEvent.RefreshView x:
            ICU.RefreshModels();
            UpdateParent();
            break;
        default:
            break;
        }
    }

    protected override void OnInitialized() {
        ICU.MsgBus.DoAction(HandleEvent);
    }
}

@{ 
    var p = 100.0*doneTests/numTests;
    var exec = running ? "oi-ban" : "oi-reload";
}

<div class="main-toolbar">
<GridLayout Cols="auto 1fr repeat(3, auto)" style="align-items:center">
    <a href="http://icublazor.com/" target="_blank">
        <img loading="lazy" alt="IcuBlazor" src=@ICU.GetLogo()>
    </a>
    <span>
        @status
        @* -- calling StateHasChanged() above confuses BlazorStyled (sometimes).
        <div class="progress prog-bar">
            <div class="progress-bar bg-success" role="progressbar"
                style="width: @p%" aria-valuenow="@p"
                aria-valuemin="0" aria-valuemax="100"></div>
        </div>*@
    </span>

    <input class="filter-input" type="text" placeholder="Filter..." @bind="Filter" />
    @*<span class="oi oi-magnifying-glass tb-btn"></span>*@

    <span class="oi @exec tb-btn" @onclick="ToggleExecution"></span>

    <DropDown OnShown=@OnSettingsShown>
        <LabelContent>
            <span class="oi oi-cog tb-btn"></span>
        </LabelContent>
        <DropContent>
            <IcuSettings @ref=@setDlg />
        </DropContent>
    </DropDown>

</GridLayout>
</div>