@page "/IcuMethod"

@code {
    [CascadingParameter(Name = "ICU")] internal IcuClient ICU { get; set; } = null!; // non-null required
    [Parameter] public TestMethod Method { get; set; } = null!; // non-null required

    protected override void OnInitialized() {
        Method.OnChange.DoAction((msg) => {
            //DBG.Log($"IcuMethod.StateChanged {M.TestName} {msg.GetType().FullName}");
            base.InvokeAsync(StateHasChanged);
        });
    }

    void Clicked() {
        ICU.MsgBus.Notify(IcuEvent.NewSelected(Method));
    }

}
@{
    var M = Method;
    var checks = M.Kids.Copy(); // could be modified while rendering
    int NPass = checks.Count(tr => tr.Outcome == Outcome.Pass);
    int NTests = checks.Length;
    int NFail = NTests - NPass;

    var rt = (int)M.RunTime;
    var hasDetail = (ICU.Config.ViewLayout != ViewLayout.TreeDetail) && (NTests > 0);
}

<div class="test-method fillw" @onclick="Clicked">
    <Folder Tree="@M" HasDetail="@hasDetail">
        <HeaderTitle>
            <GridLayout Cols="auto 1fr auto" class="fillw">
                <OutcomeIcon Outcome="@M.Outcome" />
                <div>@M.Name</div>
                @*<div class="flex-grow">@M.Name (@NPass/@NTests)</div>*@
                <div> @(rt < 1 ? "< 1" : $"{rt}")ms</div>
            </GridLayout>
        </HeaderTitle>
        <Detail>
            @foreach (var c in checks) {
                <IcuCheckpoint Check="@c"/>
            }
        </Detail>
    </Folder>
</div>
