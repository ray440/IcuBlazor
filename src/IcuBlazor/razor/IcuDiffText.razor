@page "/IcuDiffText"

@code {
    [CascadingParameter(Name = "ICU")] IcuClient ICU { get; set; } = null!; // non-null required
    [CascadingParameter(Name = "CPview")] IcuCheckpoint CPview { get; set; } = null!; // non-null required
    [Parameter] public Checkpoint Check { get; set; } = null!; // non-null required
    DiffFileAssert diff = null!; // ok init

    DiffFileAssert getDiff()
    {
        var d = Check.model as DiffFileAssert;
        if (d == null) throw (new Exception("Invalid DiffFileAssert"));
        return d;
    }

    string status = "";
    async Task ShowStatus(string msg, int wait)
    {
        status = msg;
        CPview.Update(); //StateHasChanged();
        await Task.Delay(wait);
    }

    async Task VerifyTest(bool save) {
        try {
            if (save) {
                await ShowStatus("Saving...", 10);
                diff.Expect = diff.Result;
                await IcuRpc.SaveFileTest(ICU.Session, diff);
                status = "Saved";
            }
            Check.SetSaveSkip(save);
            Check.Verify().Value = false;
        } catch (Exception) {
            status = $"Error: Couldn't save Test '{diff.Name}'";
        }
        StateHasChanged();
        ICU.MsgBus.Notify(IcuEvent.NewRefreshView(""));
    }
    async Task do_save(bool save)
    {
        if (ICU.Config.CanSaveTestData) {
            await VerifyTest(save);
        } else {
            await ShowStatus("Saving...", 500);
            await ShowStatus("Canceled: Saving is disabled.", 10);
        }
    }
    void SkipTest() => _ = do_save(false);
    void SaveTest() => _ = do_save(true);

    RenderFragment toolbar()
    {
        var pass = (Check.Outcome == Outcome.Pass);
        if (diff.WSdiffs && status.Length == 0) {
            status = "* Detected newline/whitespace diffs";
        }
        var ncols = pass ? 1 : 3;
        var cols = $"1fr repeat({ncols}, auto)";

        return (
@<GridLayout Cols=@cols class="darker10">
    @if (status.Length > 0) {
        <span> @status &nbsp;&nbsp;</span>
    } else {
        <span></span>
    }
    @if (!pass) {
        @if (Check.Verify().Value) {
            <Btn class="hover-brighter box-skip" @onclick=SkipTest>Skip Result</Btn>
        } else {
            <span />
        }
        <Btn class="hover-brighter box-pass" @onclick=SaveTest>Save Result</Btn>
    }
    <DropDown OpenOnHover="false">
        <LabelContent>
            <div class="hover-brighter hover-lighter40">?</div>
        </LabelContent>
        <DropContent>
            <PopupHelp name="Text"/>
        </DropContent>
    </DropDown>
</GridLayout>
        );
    }
}
@{
    diff = getDiff();
    var (e, r) = (diff.Expect, diff.Result);
    if (diff.WSdiffs) {
        // show whitespace diffs--but don't save them!
        e = DiffService.WSescape(e);
        r = DiffService.WSescape(r);
    }
    CPview.SetToolbar(toolbar());
}

<DiffText OldText=@e NewText=@r />

