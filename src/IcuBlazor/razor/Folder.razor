@page "/Folder"

@inject UIHelper UI

@code {

    [Parameter] public Tree.Base Tree { get; set; } = null!; // required
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? HeaderTitle { get; set; }
    [Parameter] public RenderFragment? Detail { get; set; }
    [Parameter] public bool StayOpen { get; set; } = false; // for verifying
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool HasDetail { get; set; } = true;
    [Parameter] public bool Indented { get; set; } = true;

    // save folder's open state to LocalStorage
    string okey = null!; // set in OnInitializedAsync()
    void makeOpenKey() { okey = SlashPath.Make(Tree.Path, "Open"); }
    async Task ReadOpenKey() { Tree.Open = await UI.LS.GetItem<bool>(okey, true); }
    void SaveOpenKey() { _ = UI.LS.SetItem(okey, Tree.Open); }  // fire & forget

    void ToggleDetail() {
        Tree.ToggleOpen();
        SaveOpenKey();
    }

    protected override async Task OnInitializedAsync() {
        Tree.Open = false;
        makeOpenKey();
        await ReadOpenKey();
        Tree.OnChange.DoAction(msg => {
            base.InvokeAsync(StateHasChanged);
        });
    }
}

@{
    var open = StayOpen || Tree.Open;
    var noIcon = StayOpen || !HasDetail;
    var iconOpen =
        noIcon ? "" : (open ? "oi-chevron-bottom" : "oi-chevron-right");
    var indent = (Indented && ShowHeader) ? "indent" : "";
    var showDetail = HasDetail && open;
}

@*
Note: This layout doesn't wrap Folders in a div container (e.g. grid-layout).
- This provides a more efficient & dynamic rendering of recursive elements.
  - elements are rendered top to bottom (parent then child)
  - rather than inside-out (child then parent)
    - e.g. a grid or flex layout is expensive (& does wacky things!)
*@

@if (ShowHeader) {
    if (Header != null) {
        @Header
    } else if (HeaderTitle != null) {
        <div class="hdr-title">
            <div class="oi @iconOpen open-icon" @onclick="ToggleDetail"></div>
            @HeaderTitle
        </div>
    }
}

@*<OpenCloseAnim Show=@showDetail>
    <div class="indent">
        @Detail
    </div>
</OpenCloseAnim>*@

@if (showDetail) {
    <div class="indent">
        @Detail
    </div>
}
