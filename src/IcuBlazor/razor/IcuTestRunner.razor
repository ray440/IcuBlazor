@page "/IcuTestRunner"

@using IcuBlazor.razor.Views

@code {
    [CascadingParameter(Name = "ICU")] IcuClient ICU { get; set; } = null!; // non-null required
    [Parameter] public int Width { get; set; } = 1000;

    string wstyle = "";
    List<IcuTestSuite> Suites = new List<IcuTestSuite>();
    IcuToolbar? bar;
    ViewerLayout? vlayout;

    public void Update()
    {
        if (vlayout != null) vlayout.Update();
        StateHasChanged();
    }

    internal void AddTestMethods() {
        foreach (var sut in Suites) {
            sut.AddTests();
        }
    }

    internal async Task RunAllSuites() {
        ICU.MsgBus.Notify(IcuEvent.NewRunStart(this));

        var last = Suites.LastOrDefault();
        var T  = 500L;
        var t0 = DateTime.Now.Ticks;

        foreach (var sut in Suites) {
            DBG.Info("\n");
            var title = sut.GetType().Name;
            await sut.ExecuteTests(sut == last).Wrap(title);

            var now = DateTime.Now.Ticks;
            T += (now - t0)/10000;
            t0 = now;
            if (T > 500) {
                T = 0;
                Update();
                //await Task.Delay(10);
            }
        }

        ICU.MsgBus.Notify(IcuEvent.NewRunEnd(this));
        await Task.Delay(200);
        ICU.RefreshModels();
        Update();
    }

    //void KeyWasPressed(KeyboardEventArgs args) {
    //    var k = args.Key.ToLower();
    //    DBG.Log($"key = {k}");
    //    switch (k) {
    //    case "1":
    //        var c = ICU.Config;
    //        c.ViewLayout = c.ViewLayout switch {
    //            ViewLayout.Tree => ViewLayout.TreeDetail, 
    //            ViewLayout.TreeDetail => ViewLayout.Flat,
    //            ViewLayout.Flat => ViewLayout.Tree,
    //            _ => ViewLayout.Tree,
    //        };
    //        Update();
    //        break;
    //    default:
    //        break;
    //    }
    //}

    public void Run(List<IcuTestSuite> suites) {
        Suites = suites;
        AddTestMethods();
        _ = RunAllSuites();
    }

}
@{
    wstyle = $"width:{Width}px";
}

<div style="@wstyle">
    <IcuToolbar @ref="bar" OnUpdate="((x)=>Update())"/>
    @if (bar != null) {
        @if (bar.error != null) {
            <ExceptionView Model="@bar.error" />
            <br/>
        }
        <ViewerLayout @ref="vlayout"/>
    }
</div>
