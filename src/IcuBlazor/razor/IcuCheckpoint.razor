@page "/IcuCheckpoint"

@code {
    [CascadingParameter(Name = "ICU")] IcuClient ICU { get; set; }
    [Parameter] public Checkpoint Check { get; set; }
    [Parameter] public bool Verify { get; set; } = false;
}
@{
    var CP = Check;
    var si = OutcomeIcon.OutcomeStat(CP.Outcome);
    var box = "box box-" + si.State;
    var hasDetail = 
        (CP.testType.Tag != TestType.Tags.Assert)
        || !string.IsNullOrWhiteSpace(CP.msg);

    var phdr = "";
    if (ICU.Config.ViewLayout == ViewLayout.Flat) {
        var p = CP.Parent.Value as TestMethod;
        phdr = (p != null) ? $"{p.Parent.Value.Name}\\{p.Name}: " : "";
    }
}

<Styled>
.icu .boxed {
    padding: 0.1em 0.7em;
    align-items: center;
    @*border: 0.2em solid transparent;*@
    opacity: 0.75;
}
.icu .boxed:hover {
    opacity: 1.0;
}

.icu .box {
    @*margin: 0.2em 0;
    padding: 0.2em;*@
    margin: 3px 0;
    padding: 3px;
    align-items: center;
}
.icu .box-lined {
    border-width: 0px;
    border-bottom: 0.2em solid @XSS.darker(0.1);
}
.icu .box-lined:hover {
    border-bottom-color: black;
}
.icu .box-button {
    @*background: @XSS.lighter(0.1);*@
}
.icu .box-button:hover {
    background: @XSS.darker(0.1);
}

.icu .box-pass {
    background: [--pass-light];
    @*border-color: [--pass-dark];*@
}
.icu .box-fail {
    background: [--fail-light];
    @*border-color: [--fail-dark];*@
}
.icu .box-skip {
    background: [--skip-light];
    @*border-color: [--skip-dark];*@
}
.icu .box-unknown {
    background: [--skip-light];
    @*border-color: [--skip-dark];*@
}

.icu .test-assert {
    font-size: 80%;
    overflow-x: auto;
    white-space: pre-wrap;
}

.icu .diff-toolbar {
    background: @XSS.darker(0.1);
    grid-template-columns: 1fr repeat(3, auto);
    align-items: center;
}
.icu .btn-key {
    font-family: [--font-fixed];
    border-radius: .25rem;
    padding: 0.2em 0.4em;
}
</Styled>

<div class="@box" @key=@CP.Path>
    <Folder Tree="@CP" HasDetail="@hasDetail" StayOpen="@Verify">
        <HeaderTitle>
            <OutcomeIcon Outcome="@CP.Outcome" />&nbsp;
            <span class="muted-text">@phdr</span> &nbsp; @CP.header
        </HeaderTitle>
        <Detail>
            @switch (CP.testType.Tag) {
            case TestType.Tags.Assert:
                <div class="test-assert"><pre>@CP.msg</pre></div>
                break;
            case TestType.Tags.TextDiff:
                var d = CP.DiffAssert;
                <DiffText OldText=@d.Expect NewText=@d.Result />
                break;
            case TestType.Tags.LogDiff:
                <IcuDiffText Check="@CP" />
                break;
            case TestType.Tags.ImageDiff:
                <IcuDiffImage Check="@CP" />
                break;
            }
        </Detail>
    </Folder>
</div>
